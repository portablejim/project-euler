#![feature(test)]
extern crate simd;
extern crate test;

//#[cfg(target_feature = "avx")]
//use simd::x86::avx::u16x16 as u1616;
use simd::u32x4;
use std::ops::Add;

//#[cfg(target_feature = "avx")]
fn do_calc() -> String {
    let nums: [u32x4; 100] = [
                u32x4::new(3710,7287,5339,021),
                u32x4::new(4637,6937,6774,900),
                u32x4::new(7432,4986,1995,247),
                u32x4::new(9194,2213,3635,741),
                u32x4::new(2306,7588,2075,393),
                u32x4::new(8926,1670,6966,236),
                u32x4::new(2811,2879,8128,499),
                u32x4::new(4427,4228,9174,325),
                u32x4::new(4745,1445,7360,013),
                u32x4::new(7038,6486,1058,430),
                u32x4::new(6217,6457,1418,565),
                u32x4::new(6490,6352,4627,419),
                u32x4::new(9257,5867,7183,372),
                u32x4::new(5820,3565,3253,593),
                u32x4::new(8018,1199,3848,262),
                u32x4::new(3539,8664,3728,271),
                u32x4::new(8651,5506,0062,958),
                u32x4::new(7169,3888,7077,154),
                u32x4::new(5437,0070,5768,266),
                u32x4::new(5328,2654,1087,568),
                u32x4::new(3612,3272,5250,002),
                u32x4::new(4587,6576,1724,109),
                u32x4::new(1742,3706,9058,518),
                u32x4::new(8114,2660,4180,868),
                u32x4::new(5193,4325,4517,283),
                u32x4::new(6246,7221,6484,350),
                u32x4::new(1573,2444,3869,081),
                u32x4::new(5503,7687,5256,787),
                u32x4::new(1833,6384,8253,301),
                u32x4::new(8038,6287,5928,784),
                u32x4::new(7818,2833,7579,931),
                u32x4::new(1672,6320,1004,368),
                u32x4::new(4840,3098,1290,777),
                u32x4::new(8708,6987,5513,927),
                u32x4::new(5995,9406,8957,565),
                u32x4::new(6979,3950,6796,526),
                u32x4::new(4105,2684,7082,990),
                u32x4::new(6537,8607,3615,010),
                u32x4::new(3582,9035,3174,347),
                u32x4::new(9495,3759,7651,053),
                u32x4::new(8890,2802,5717,332),
                u32x4::new(2526,7680,2760,780),
                u32x4::new(3627,0218,5404,977),
                u32x4::new(2407,4486,9082,311),
                u32x4::new(9143,0288,1971,032),
                u32x4::new(3441,3065,5780,161),
                u32x4::new(2305,3081,1728,164),
                u32x4::new(1148,7696,9321,549),
                u32x4::new(6378,3299,4906,362),
                u32x4::new(6772,0186,9716,985),
                u32x4::new(9554,8255,3002,635),
                u32x4::new(7608,5327,1322,857),
                u32x4::new(3777,4242,5354,112),
                u32x4::new(2370,1913,2757,256),
                u32x4::new(2979,8860,2722,583),
                u32x4::new(1849,5701,4548,792),
                u32x4::new(3829,8203,7830,314),
                u32x4::new(3482,9543,8291,999),
                u32x4::new(4095,7953,0664,052),
                u32x4::new(2974,6152,1855,023),
                u32x4::new(4169,8116,2220,729),
                u32x4::new(6246,7957,1944,012),
                u32x4::new(2318,9706,7725,479),
                u32x4::new(8618,8088,2258,753),
                u32x4::new(1130,6739,7083,047),
                u32x4::new(8295,9174,7671,403),
                u32x4::new(9762,3331,0448,183),
                u32x4::new(4284,6280,1835,170),
                u32x4::new(5512,1603,5469,812),
                u32x4::new(3223,8195,7343,293),
                u32x4::new(7550,6164,9651,847),
                u32x4::new(6217,7842,7521,926),
                u32x4::new(3292,4185,7071,473),
                u32x4::new(9951,8671,4302,352),
                u32x4::new(7326,7460,8005,915),
                u32x4::new(7684,1822,5246,744),
                u32x4::new(9714,2617,9103,425),
                u32x4::new(8778,3646,1827,993),
                u32x4::new(1084,8802,5216,746),
                u32x4::new(7132,9612,4747,824),
                u32x4::new(6218,4073,5723,997),
                u32x4::new(6662,7891,9814,880),
                u32x4::new(6066,1826,2936,828),
                u32x4::new(8578,6944,0895,529),
                u32x4::new(6602,4396,4099,053),
                u32x4::new(6491,3982,6800,329),
                u32x4::new(1673,0939,3198,727),
                u32x4::new(9480,9377,2450,487),
                u32x4::new(7863,9167,0211,874),
                u32x4::new(1536,8713,7119,366),
                u32x4::new(4078,9923,1155,355),
                u32x4::new(4488,9911,5014,406),
                u32x4::new(4150,3128,8803,395),
                u32x4::new(8123,4880,6732,101),
                u32x4::new(8261,6570,7739,483),
                u32x4::new(2291,8802,0587,773),
                u32x4::new(7715,8542,5020,165),
                u32x4::new(7210,7838,4350,691),
                u32x4::new(2084,9603,9801,340),
                u32x4::new(5350,3534,2264,725)];
    let mut sum = u32x4::splat(0);
    for i in 0..nums.len() {
        sum = sum + nums[i];
    }
    let mut total = format!("{}{}{}{}", 
        (sum.extract(0)) + (sum.extract(1)/10_000),
        (sum.extract(1) % 10_000) + (sum.extract(2)/10_000),
        (sum.extract(2) % 10_000) + (sum.extract(3)/1_000),
        (sum.extract(3) % 1_000)
    );
    total.truncate(10);
    total
}

fn main() {
    println!("{}", do_calc())
}

#[bench]
fn bench_simd(b: &mut test::Bencher) {
    b.iter(|| {
        do_calc()
    });
}
